4.1 Implement a function to check if a binary tree is balanced. For the purposes of this
question, a balanced tree is defined to be a tree such that the heights of the two
subtrees of any node never differ by more than one

solution 1:
public static int getHeight(TreeNode root) {
if (root == null) return 0; // Base case
 return Math.max(getHeight(root.left),
 getHeight(root.right)) + 1;
 }
 
public static boolean isBalanced(TreeNode root) {
 if (root == null) return true; // Base case
 int heightDiff =
getHeight(root.left) -
getHeight(root.right);
 if (Math.abs(heightDiff) > 1) {
 return false;
 } else { // Recurse
 return isBalanced(root.left) && isBalanced(root.right);
 }
 }

solution 2:
public static int checkHeight(TreeNode root) {
 if (root == null) {
 return 0; // Height of 0
 }

 /* Check if left is balanced. */
int leftHeight = checkHeight(root.left);
 if (leftHeight == -1) {
 return -1; // Not balanced
 }
 /* Check if right is balanced. */
 int rightHeight = checkHeight(root.right);
 if (rightHeight == -1) {
 return -1; // Not balanced
 }

 /* Check if current node is balanced. */
 int heightDiff = leftHeight - rightHeight;
 if (Math.abs(heightDiff) > 1) {
 return -1; // Not balanced
 } else {
 /* Return height */
 return Math.max(leftHeightJ rightHeight) + 1;
 }
 }

 public static boolean isBalanced(TreeNode root) {
 if (checkHeight(root) == -1) {
 return false;
 } else {
 return true;
 }
 }
 
4.2 Given a directed graph, design an algorithm to find out whether there is a route
between two nodes.

public static boolean search(Graph g, Node start, Node end) {
 // operates as Queue
LinkedList<Node> q = new LinkedList<Node>();

for (Node u:g.getNodesQ) {
 u.state = State.Unvisited;
}
start.state = State.Visiting;
 q.add(start);
 Node u;
 while (Iq.isEmptyQ) {
 u = q.removeFlrst(); // i.e., dequeueQ
 if (u != null) {
 for (Node v : u.getAdjacentQ) {
 if (v.state == State.Unvisited) {
 if (v == end) {
 return true;
} else {
 v.state = State.Visiting;
 q.add(v);
 }
 }
}
 u.state = State.Visited;
 }
 }
 return false;
 }
 
 
 4.3 Given a sorted (increasing order) array with unique integer elements, write an algorithm
to create a binary search tree with minimal height

4.4 Given a binary tree, design an algorithm which creates a linked list of all the nodes at
each depth (e.g., if you have a tree with depth D, you'll have D linked lists

4.5 Imp/emen t a function to check if a binary tree is a binary search tree.
Solution 1: Inorder traversal, store in array and check if its sorted 
Solution 2: Inorder traversal, instead of array check the last value with the current node
Solution 3: Inorder traversal, storing the min and max values fro left tree and right tree.

4.6 Write an algorithm to find the 'next'node (i.e., in-order successor) of a given node in
a binary search tree. You may assume that each node has a link to its parent.

4.7 Design an algorithm and write code to find the first common ancestor of two nodes
in a binary tree. Avoid storing additional nodes in a data structure. NOTE: This is not
necessarily a binary search tree.

/* Returns true if p is a descendent of root */
 boolean covers(TreeNode root, TreeNode p) {
 if (root == null) return false;
 if (root == p) return true;
 return covers(root.left, p) || covers(root.right, p);
 }

 TreeNode commonAncestorHelper(TreeNode root, TreeNode p,
 TreeNode q) {
 if (root == null) return null;
 if (root == p || root == q) return root;

 boolean is_p_on_left = covers(root.left, p);
 boolean is_q_on_left = covers(root.left, q);

/* If p and q are on different sides, return root. */
if (is_p_on_left != is_q_on_left) return root;
/* Else, they are on the same side. Traverse this side. */
 TreeNode child_side = is_p_on_left ? root.left : root.right;
 return commonAncestorHelper(child_side, p, q);
 }

4.8 You have two very large binary trees: Tl, with millions of nodes, and T2, with
hundreds of nodes. Create an algorithm to decide ifT2 is a subtree ofTl.

4.9 You are given a binary tree in which each node contains a value. Design an algorithm
to print all paths which sum to a given value. The path does not need to start
or end at the root or a leaf


/* TO DO */
Given a binary tree, convert it to doubly linked list?
